use std::fs;
use std::path::Path;
use image::{RgbaImage, Rgba};
use imageproc::drawing::draw_filled_rect_mut;
use imageproc::rect::Rect;
use hsl::HSL;

fn main() {
    let patterns = [
        [
            0b1111111111111111,
            0b1111111111111111,
            0b0000000000000000,
            0b0000000000000000,
            0b1111111111111111,
            0b1111111111111111,
            0b0000000000000000,
            0b0000000000000000,
            0b1111111111111111,
            0b1111111111111111,
            0b0000000000000000,
            0b0000000000000000,
            0b1111111111111111,
            0b1111111111111111,
            0b0000000000000000,
            0b0000000000000000,
        ],
        [
            0b1100110011001100,
            0b1100110011001100,
            0b1100110011001100,
            0b1100110011001100,
            0b1100110011001100,
            0b1100110011001100,
            0b1100110011001100,
            0b1100110011001100,
            0b1100110011001100,
            0b1100110011001100,
            0b1100110011001100,
            0b1100110011001100,
            0b1100110011001100,
            0b1100110011001100,
            0b1100110011001100,
            0b1100110011001100,
        ],
        [
            0b1111111111111111,
            0b1000000000000001,
            0b1011111111111101,
            0b1010000000000101,
            0b1010111111110101,
            0b1010100000010101,
            0b1010101111010101,
            0b1010101001010101,
            0b1010101001010101,
            0b1010101111010101,
            0b1010100000010101,
            0b1010111111110101,
            0b1010000000000101,
            0b1011111111111101,
            0b1000000000000001,
            0b1111111111111111,
        ],
        [
            0b1100110011001100,
            0b1100110011001100,
            0b0011001100110011,
            0b0011001100110011,
            0b1100110011001100,
            0b1100110011001100,
            0b0011001100110011,
            0b0011001100110011,
            0b1100110011001100,
            0b1100110011001100,
            0b0011001100110011,
            0b0011001100110011,
            0b1100110011001100,
            0b1100110011001100,
            0b0011001100110011,
            0b0011001100110011,
        ],
        [
            0b0001110000111000,
            0b0001110000111000,
            0b0001110000111000,
            0b1111111111111111,
            0b1111111111111111,
            0b1111111111111111,
            0b0001110000111000,
            0b0001110000111000,
            0b0001110000111000,
            0b0001110000111000,
            0b1111111111111111,
            0b1111111111111111,
            0b1111111111111111,
            0b0001110000111000,
            0b0001110000111000,
            0b0001110000111000,
        ],
        [
            0b0000111100001111,
            0b0000111100001111,
            0b0000111100001111,
            0b0000111100001111,
            0b1111000011110000,
            0b1111000011110000,
            0b1111000011110000,
            0b1111000011110000,
            0b0000111100001111,
            0b0000111100001111,
            0b0000111100001111,
            0b0000111100001111,
            0b1111000011110000,
            0b1111000011110000,
            0b1111000011110000,
            0b1111000011110000,
        ],
        [
            0b1111000000001111,
            0b1110000000011111,
            0b1100000000111111,
            0b1000000001111111,
            0b0000000011111110,
            0b0000000111111100,
            0b0000001111111000,
            0b0000011111110000,
            0b0000111111100000,
            0b0001111111000000,
            0b0011111110000000,
            0b0111111100000000,
            0b1111111000000001,
            0b1111110000000011,
            0b1111100000000111,
            0b1111000000001111,
        ],
        [
            0b1111000000001111,
            0b1111100000000111,
            0b1111110000000011,
            0b1111111000000001,
            0b0111111100000000,
            0b0011111110000000,
            0b0001111111000000,
            0b0000111111100000,
            0b0000011111110000,
            0b0000001111111000,
            0b0000000111111100,
            0b0000000011111110,
            0b1000000001111111,
            0b1100000000111111,
            0b1110000000011111,
            0b1111000000001111,
        ],
        [
            0b1111000000001111,
            0b1111100000011111,
            0b1111110000111111,
            0b1111111001111111,
            0b0111111111111110,
            0b0011111111111100,
            0b0001111111111000,
            0b0000111111110000,
            0b0000111111110000,
            0b0001111111111000,
            0b0011111111111100,
            0b0111111111111110,
            0b1111111001111111,
            0b1111110000111111,
            0b1111100000011111,
            0b1111000000001111,
        ],
        [
            0b0000001001000000,
            0b0000000000000000,
            0b0011100110011100,
            0b0100010110100010,
            0b0100001111000010,
            0b0010000110000100,
            0b0010000110000100,
            0b0001000110001000,
            0b0001111111111000,
            0b0010000110000100,
            0b0100000110000010,
            0b0100000110000010,
            0b0100000110000010,
            0b0010000110000100,
            0b0001000110001000,
            0b0000111111110000,
        ],
    ];

    let saturation = 0.5;
    let luminosity = 0.5;
    let mut hue = 0.;
    let mut colors = Vec::new();
    for _ in 0..16 {
        let color = HSL {
            h: hue,
            s: saturation,
            l: luminosity,
        };

        let rgb = color.to_rgb();
        colors.push(Rgba([rgb.0, rgb.1, rgb.2, 255]));

        hue += 22.5;
    }

    fs::create_dir_all("output").unwrap();

    let mut results = Vec::new();

    for (pattern_index, pattern) in patterns.iter().enumerate() {
        for (color_index, color) in colors.iter().enumerate() {
            let mut image = RgbaImage::new(16, 16);

            for (y, line) in pattern.iter().enumerate() {
                let mut bitmask = 32768; // 16th bit set to start from the left.
                for x in 0..16 {
                    if line & bitmask > 0 {
                        draw_filled_rect_mut(&mut image, Rect::at(x, y as i32)
                            .of_size(1, 1), *color);
                    }
                    bitmask >>= 1;
                }
            }

            fs::create_dir_all(format!("output/icon-{}", pattern_index + 1)).unwrap();
            let file_name = format!("output/icon-{}/color-{}.png",
                                    pattern_index + 1, color_index + 1);
            let path = Path::new(&file_name);
            image.save(path).unwrap();

            results.push((file_name, pattern_index + 1, color_index + 1));
        }

        let mut readme_contents = String::from("# Icon Generator

## All icons:");

        let mut last_pattern_index = 0;
        for result in results.iter() {
            if result.1 != last_pattern_index {
                readme_contents += &format!("\n\n### Pattern {}\n", result.1);
                last_pattern_index = result.1;
            }

            readme_contents += &format!("\n![Icon {}, Color {}](/{})",
                                        result.1, result.2, result.0);
        }

        readme_contents += "\n";

        fs::write("README.md", readme_contents).unwrap();
    }
}
